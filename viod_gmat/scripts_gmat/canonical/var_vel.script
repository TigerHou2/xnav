%General Mission Analysis Tool(GMAT) Script
%Created: 2020-05-25 16:21:27


%----------------------------------------
%---------- Spacecraft
%----------------------------------------

Create Spacecraft sc;
GMAT sc.DateFormat = TAIModJulian;
GMAT sc.Epoch = '21545';
GMAT sc.CoordinateSystem = EarthMJ2000Eq;
GMAT sc.DisplayStateType = Keplerian;
GMAT sc.SMA = 9999.999999999998;
GMAT sc.ECC = 0.2999999999999998;
GMAT sc.INC = 29.99999999999995;
GMAT sc.RAAN = 40.00000000000002;
GMAT sc.AOP = 70.00000000000026;
GMAT sc.TA = 0;
GMAT sc.DryMass = 850;
GMAT sc.Cd = 2.2;
GMAT sc.Cr = 1.8;
GMAT sc.DragArea = 15;
GMAT sc.SRPArea = 1;
GMAT sc.NAIFId = -10002001;
GMAT sc.NAIFIdReferenceFrame = -9002001;
GMAT sc.OrbitColor = Red;
GMAT sc.TargetColor = Teal;
GMAT sc.OrbitErrorCovariance = [ 1e+070 0 0 0 0 0 ; 0 1e+070 0 0 0 0 ; 0 0 1e+070 0 0 0 ; 0 0 0 1e+070 0 0 ; 0 0 0 0 1e+070 0 ; 0 0 0 0 0 1e+070 ];
GMAT sc.CdSigma = 1e+070;
GMAT sc.CrSigma = 1e+070;
GMAT sc.Id = 'SatId';
GMAT sc.Attitude = CoordinateSystemFixed;
GMAT sc.SPADSRPScaleFactor = 1;
GMAT sc.ModelFile = 'aura.3ds';
GMAT sc.ModelOffsetX = 0;
GMAT sc.ModelOffsetY = 0;
GMAT sc.ModelOffsetZ = 0;
GMAT sc.ModelRotationX = 0;
GMAT sc.ModelRotationY = 0;
GMAT sc.ModelRotationZ = 0;
GMAT sc.ModelScale = 1;
GMAT sc.AttitudeDisplayStateType = 'Quaternion';
GMAT sc.AttitudeRateDisplayStateType = 'AngularVelocity';
GMAT sc.AttitudeCoordinateSystem = EarthMJ2000Eq;
GMAT sc.EulerAngleSequence = '321';




%----------------------------------------
%---------- ForceModels
%----------------------------------------

Create ForceModel perturbed_ForceModel;
GMAT perturbed_ForceModel.CentralBody = Earth;
GMAT perturbed_ForceModel.PrimaryBodies = {Earth};
GMAT perturbed_ForceModel.PointMasses = {Luna, Sun};
GMAT perturbed_ForceModel.Drag = None;
GMAT perturbed_ForceModel.SRP = On;
GMAT perturbed_ForceModel.RelativisticCorrection = Off;
GMAT perturbed_ForceModel.ErrorControl = RSSStep;
GMAT perturbed_ForceModel.GravityField.Earth.Degree = 4;
GMAT perturbed_ForceModel.GravityField.Earth.Order = 4;
GMAT perturbed_ForceModel.GravityField.Earth.StmLimit = 100;
GMAT perturbed_ForceModel.GravityField.Earth.PotentialFile = 'EGM96.cof';
GMAT perturbed_ForceModel.GravityField.Earth.TideModel = 'None';
GMAT perturbed_ForceModel.SRP.Flux = 1367;
GMAT perturbed_ForceModel.SRP.SRPModel = Spherical;
GMAT perturbed_ForceModel.SRP.Nominal_Sun = 149597870.691;

Create ForceModel twoBody_ForceModel;
GMAT twoBody_ForceModel.CentralBody = Earth;
GMAT twoBody_ForceModel.PointMasses = {Earth};
GMAT twoBody_ForceModel.Drag = None;
GMAT twoBody_ForceModel.SRP = Off;
GMAT twoBody_ForceModel.RelativisticCorrection = Off;
GMAT twoBody_ForceModel.ErrorControl = RSSStep;

Create ForceModel propagator_ForceModel;
GMAT propagator_ForceModel.CentralBody = Earth;
GMAT propagator_ForceModel.PointMasses = {Earth};
GMAT propagator_ForceModel.Drag = None;
GMAT propagator_ForceModel.SRP = Off;
GMAT propagator_ForceModel.RelativisticCorrection = Off;
GMAT propagator_ForceModel.ErrorControl = RSSStep;

%----------------------------------------
%---------- Propagators
%----------------------------------------

Create Propagator perturbed;
GMAT perturbed.FM = perturbed_ForceModel;
GMAT perturbed.Type = RungeKutta89;
GMAT perturbed.InitialStepSize = 60;
GMAT perturbed.Accuracy = 9.999999999999999e-012;
GMAT perturbed.MinStep = 0.001;
GMAT perturbed.MaxStep = 2700;
GMAT perturbed.MaxStepAttempts = 50;
GMAT perturbed.StopIfAccuracyIsViolated = true;

Create Propagator twoBody;
GMAT twoBody.FM = twoBody_ForceModel;
GMAT twoBody.Type = RungeKutta89;
GMAT twoBody.InitialStepSize = 60;
GMAT twoBody.Accuracy = 9.999999999999999e-012;
GMAT twoBody.MinStep = 0.001;
GMAT twoBody.MaxStep = 2700;
GMAT twoBody.MaxStepAttempts = 50;
GMAT twoBody.StopIfAccuracyIsViolated = true;

Create Propagator propagator;
GMAT propagator.FM = propagator_ForceModel;
GMAT propagator.Type = RungeKutta89;
GMAT propagator.InitialStepSize = 60;
GMAT propagator.Accuracy = 9.999999999999999e-012;
GMAT propagator.MinStep = 0.001;
GMAT propagator.MaxStep = 2700;
GMAT propagator.MaxStepAttempts = 50;
GMAT propagator.StopIfAccuracyIsViolated = true;

%----------------------------------------
%---------- Subscribers
%----------------------------------------

Create OrbitView orbitView;
GMAT orbitView.SolverIterations = Current;
GMAT orbitView.UpperLeft = [ 0 0 ];
GMAT orbitView.Size = [ 0.7 0.9 ];
GMAT orbitView.RelativeZOrder = 587;
GMAT orbitView.Maximized = false;
GMAT orbitView.Add = {sc, Earth, Luna, Sun};
GMAT orbitView.CoordinateSystem = EarthMJ2000Eq;
GMAT orbitView.DrawObject = [ true true true true ];
GMAT orbitView.DataCollectFrequency = 1;
GMAT orbitView.UpdatePlotFrequency = 50;
GMAT orbitView.NumPointsToRedraw = 0;
GMAT orbitView.ShowPlot = true;
GMAT orbitView.MaxPlotPoints = 20000;
GMAT orbitView.ShowLabels = true;
GMAT orbitView.ViewPointReference = Earth;
GMAT orbitView.ViewPointVector = [ 150000 -100000 150000 ];
GMAT orbitView.ViewDirection = Earth;
GMAT orbitView.ViewScaleFactor = 1;
GMAT orbitView.ViewUpCoordinateSystem = EarthMJ2000Eq;
GMAT orbitView.ViewUpAxis = Z;
GMAT orbitView.EclipticPlane = Off;
GMAT orbitView.XYPlane = On;
GMAT orbitView.WireFrame = Off;
GMAT orbitView.Axes = On;
GMAT orbitView.Grid = Off;
GMAT orbitView.SunLine = On;
GMAT orbitView.UseInitialView = On;
GMAT orbitView.StarCount = 7000;
GMAT orbitView.EnableStars = On;
GMAT orbitView.EnableConstellations = On;

Create ReportFile report;
GMAT report.SolverIterations = Current;
GMAT report.UpperLeft = [ 0 0 ];
GMAT report.Size = [ 0.6 0.8 ];
GMAT report.RelativeZOrder = 570;
GMAT report.Maximized = false;
GMAT report.Filename = 'report.txt';
GMAT report.Precision = 16;
GMAT report.WriteHeaders = true;
GMAT report.LeftJustify = On;
GMAT report.ZeroFill = Off;
GMAT report.FixedWidth = true;
GMAT report.Delimiter = ' ';
GMAT report.ColumnWidth = 23;
GMAT report.WriteReport = true;

%----------------------------------------
%---------- MATLAB Functions
%----------------------------------------

Create MatlabFunction init;
GMAT init.FunctionPath = 'E:\Research\XNAV\viod_gmat\';

Create MatlabFunction savefig;
GMAT savefig.FunctionPath = 'E:\Research\XNAV\viod_gmat\misc\';

Create MatlabFunction var_vel;
GMAT var_vel.FunctionPath = 'E:\Research\XNAV\viod_gmat\scripts_matlab\canonical\';

%----------------------------------------
%---------- Arrays, Variables, Strings
%----------------------------------------

Create Array v[100,3] r_ref[1,3] sma_vect[1,7];
Create Variable mu noise f0 f df dt num_monte runTime period ecc;
Create Variable i j k temp sma_count num_obsv usePerturbations save DU TU;
Create String svnm;
GMAT sma_vect(1, 1) = 10000; % km
GMAT sma_vect(1, 2) = 12000; % km
GMAT sma_vect(1, 3) = 15000; % km
GMAT sma_vect(1, 4) = 20000; % km
GMAT sma_vect(1, 5) = 30000; % km
GMAT sma_vect(1, 6) = 45000; % km
GMAT sma_vect(1, 7) = 70000; % km
GMAT noise = 1; % m/s
GMAT f0 = 0; % deg
GMAT df = 200; % deg
GMAT num_monte = 1000;
GMAT sma_count = 7;
GMAT num_obsv = 6;
GMAT usePerturbations = 1; % 0 = Two-Body Motion, 1 = Perturbed Motion
GMAT save = 0; % 0 = don't save figure, 1 = save figure
GMAT DU = 6378.1; % km (1 Earth radii)


%----------------------------------------
%---------- Mission Sequence
%----------------------------------------

BeginMissionSequence;

% initialize MATLAB workspace
GMAT init;
GMAT mu = SolarSystem.Earth.Mu;

% canonical time unit calculation
GMAT TU = sqrt((DU^3)/mu); % seconds
GMAT mu = mu / DU^3 * TU^2;

GMAT df = df / (num_obsv-1);
GMAT f = f0;

%---------- Perturbed vs. Two-Body Motion ----------\
If usePerturbations == 1
   GMAT propagator = perturbed;
   GMAT svnm = '.\figures\canon_var_vel_perturbed';
Else
   GMAT propagator = twoBody;
   GMAT svnm = '.\figures\canon_var_vel';
EndIf;

PenUp orbitView;
Propagate propagator(sc) {sc.TA = f0};
PenDown orbitView;

For k = 1:1:sma_count;
   
   GMAT sc.SMA = sma_vect(k);
   
   For i = 1:1:num_obsv;
      
      GMAT v(i,1) = sc.EarthMJ2000Eq.VX / DU * TU;
      GMAT v(i,2) = sc.EarthMJ2000Eq.VY / DU * TU;
      GMAT v(i,3) = sc.EarthMJ2000Eq.VZ / DU * TU;
      
      GMAT f = f + df;
      If i ~= num_obsv
         
         GMAT temp = mod(i,2);
         If temp == 0
            Propagate propagator(sc) {sc.TA = f, OrbitColor = LightBlue};
         Else
            Propagate propagator(sc) {sc.TA = f, OrbitColor = Red};
         EndIf;
      
      EndIf;
   
   EndFor;
   
   %---------- Get Reference Data ----------
   
   PenUp orbitView;
   Propagate BackProp propagator(sc) {sc.Earth.TA = f0};
   PenDown orbitView;
   
   GMAT f = f0;
   
   GMAT r_ref(1) = sc.EarthMJ2000Eq.X / DU;
   GMAT r_ref(2) = sc.EarthMJ2000Eq.Y / DU;
   GMAT r_ref(3) = sc.EarthMJ2000Eq.Z / DU;
   
   GMAT period = sc.OrbitPeriod / TU;
   GMAT ecc = sc.ECC;
   
   %---------- Store Observation Data ----------
   
   GMAT var_vel(DU, TU, v, mu, noise, num_monte, r_ref, period, ecc);

EndFor;


%---------- Begin Monte Carlo Sim ----------

GMAT var_vel(DU,TU);

%---------- Save Results ----------

If save == 1
   GMAT savefig(svnm);
EndIf;

%---------- Misc Testing Code Here ----------




